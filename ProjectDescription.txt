Demos:
 - pick slot on moodle scheduler
 - on zoom

Deliverable 1 (D1) sunday oct 26 
 total marks:15
  - completeness 5
  - look and feel 5
  - navigation 5
 goal: 
  This deliverable is about what a 
  user of the system can see and do. Please take note: a user here means any user of the website. 
  This can be a student, faculty, or administrator. For this deliverable, data might be entered 
  during execution or might be “hard-coded
 submission:
  - FeaturesImplemented.txt
  - FeaturesTODO.txt
  - team discussion sheet
  - compressed project
  - An installation guide stating how to deploy your website, and 
  - A user guide showing how to use your website. 

Deliverable 2 (D2) sunday nov 23 
 total marks:15
  - completeness 5
  - look and feel 5
  - navigation 5
 goal: 
  In this deliverable, data received 
  from users, generated, or sent to users is stored in a data store residing behind a web server. 
  There will be no hard-coded data as of deliverable #2 as data will go to/come from the data 
  store. Also, you might need to revisit some of the features you implemented in deliverable #1. 

SUMMARY:
 make website to handle room bookings
 student:
  - see whats available 
  - reserve rooms
 admin :
  - manage resources
  - set availability
  - approve requests
  - monitor usage patterns. 

Minimum Required Features 
 End Users (students/faculty) should be able to: 
  - Create and manage their account (profile info, contact email, etc.). 
  - Browse a list of available resources (rooms, labs, equipment…). 
  - View real-time availability calendars/schedules of resources. 
  - Make a booking/reservation for a resource (with date, time, purpose, etc.). 
  - Modify or cancel their bookings. 
  - View their past and upcoming bookings in one place. 
 Administrators (resource managers) should be able to: 
  - Create, edit, and remove resources (names, descriptions, locations, capacities, images). 
  - Set availability schedules (working hours, exceptions, blackout dates). 
  - Approve or reject booking requests (if necessary). 
  - Block or unblock resources temporarily (e.g., for maintenance). 
  - See statistics/reports about resource usage (popular resources, peak times). 

Technical/Implementation Notes 
 - The system should be web-based, responsive, and accessible from modern browsers. 
 - It should have authentication and authorization, with different roles (User/Admin). 
 - Data must be persisted. 
 - Booking conflicts must be handled gracefully (no double-booking). 
 - The design should be modular enough to allow future additions (like payment for premium resources or integration with campus card systems). 
 - You can use any library you want. 
 - The backend is based on Node.js. 

Bonus 2 points 
 - End Users (students/faculty) should be able to receive notifications (email or in-app) for booking confirmations, changes, or cancellations. 
 - Administrator should be able to send announcements or notifications to users (e.g., maintenance downtime). 







